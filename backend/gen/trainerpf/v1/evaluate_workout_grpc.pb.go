// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: trainerpf/v1/evaluate_workout.proto

package trainerpfv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkoutService_EvaluateWorkout_FullMethodName = "/trainerpf.v1.WorkoutService/EvaluateWorkout"
)

// WorkoutServiceClient is the client API for WorkoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkoutServiceClient interface {
	EvaluateWorkout(ctx context.Context, in *EvaluateWorkoutRequest, opts ...grpc.CallOption) (*EvaluateWorkoutResponse, error)
}

type workoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkoutServiceClient(cc grpc.ClientConnInterface) WorkoutServiceClient {
	return &workoutServiceClient{cc}
}

func (c *workoutServiceClient) EvaluateWorkout(ctx context.Context, in *EvaluateWorkoutRequest, opts ...grpc.CallOption) (*EvaluateWorkoutResponse, error) {
	out := new(EvaluateWorkoutResponse)
	err := c.cc.Invoke(ctx, WorkoutService_EvaluateWorkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkoutServiceServer is the server API for WorkoutService service.
// All implementations must embed UnimplementedWorkoutServiceServer
// for forward compatibility
type WorkoutServiceServer interface {
	EvaluateWorkout(context.Context, *EvaluateWorkoutRequest) (*EvaluateWorkoutResponse, error)
	mustEmbedUnimplementedWorkoutServiceServer()
}

// UnimplementedWorkoutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkoutServiceServer struct {
}

func (UnimplementedWorkoutServiceServer) EvaluateWorkout(context.Context, *EvaluateWorkoutRequest) (*EvaluateWorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateWorkout not implemented")
}
func (UnimplementedWorkoutServiceServer) mustEmbedUnimplementedWorkoutServiceServer() {}

// UnsafeWorkoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkoutServiceServer will
// result in compilation errors.
type UnsafeWorkoutServiceServer interface {
	mustEmbedUnimplementedWorkoutServiceServer()
}

func RegisterWorkoutServiceServer(s grpc.ServiceRegistrar, srv WorkoutServiceServer) {
	s.RegisterService(&WorkoutService_ServiceDesc, srv)
}

func _WorkoutService_EvaluateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).EvaluateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_EvaluateWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).EvaluateWorkout(ctx, req.(*EvaluateWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkoutService_ServiceDesc is the grpc.ServiceDesc for WorkoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trainerpf.v1.WorkoutService",
	HandlerType: (*WorkoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvaluateWorkout",
			Handler:    _WorkoutService_EvaluateWorkout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trainerpf/v1/evaluate_workout.proto",
}
